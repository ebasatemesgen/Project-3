// PRM Pathfinding
PRM prm = new PRM();
float agent_r = 15;
Traget goal = new Traget();
float carRadius = 15;
Agent agent = new Agent();




// Terrain 
int cols, rows;
int scl = 20; 
int w = 20000;
int h = 10000; 
float[][] terrainLeft;

// Environment 
int number_building = 15;
Building[] buildings;
Camera camera;

void setup() {
    size(1280, 720, P3D);
    camera = new Camera();
    frameRate(60);
    cols = w / scl;
    rows = h / scl;
    terrainLeft = new float[cols][rows];

    // Initialize buildings
    initBuildings();

    // Initialize water, agent, and PRM
    initEnvironment();     
}

// Initialization functions for clarity
void initBuildings() {
   // initialize water
        // find a place to put the water that doesn't intersect the mountains
        float r = water.r;
    do {
            water.x = random( - 500 + r, 500 - r) + width / 2;
            water.z = random( - 1000 + r, 0 - r);
        } while(collision(water.x, water.z, r));
        
        // initialize agent
        r = agent_r;
        agent.body.r = r;
        agent.body.c = color(255, 0, 0);
    do {
            agent.body.x = random( - 500 + r, 500 - r) + width / 2;
            agent.body.z = random( - 1000 + r, 0 - r);
        } while(collision(agent.body.x, agent.body.z, r));
        // initialize the PRM
        prm.build(buildings, buildings.length);
}

void initEnvironment() {


buildings = new Building[number_building];
   


    for (int i = 0; i < buildings.length; i++) {
        boolean placed = false;
        while(!placed) {
            float s = random(50, 250);
            float x = random( - 500 + s / 2 + agent_r * 4, 500 - s / 2 - agent_r * 4) + width / 2;
            float z = random( - 1000 + s / 2 + agent_r * 4, 0 - s / 2 - agent_r * 4);
            boolean isCircular = random(1) < 0.3; // For example, 30% circular
            
            if (!collides(x, z, s, buildings)) {
                buildings[i] = new Building(s, x, z, isCircular);
                placed = true;
            }
        }
    }
}





void draw() {

            float dt= 1.0 / frameRate;
            background(255, 178,123);           
            
      
            //updateCameraToFollowAgent(dt);
             camera.update(dt);
    // Update agent and draw environment
    updateAndDrawEnvironment(dt);
            
          
        }

        
void updateAndDrawEnvironment(float dt) {
  float xoffStart = 0.0;
    float yoffStart = - 1000;

            // update agent
            agent.update(dt);
    drawTerrainSegment(terrainLeft,500, -2000, xoffStart, yoffStart); // Left of buildings

            fill(12);
            pushMatrix();
            translate(width / 2, height - 90, -500);
            box(1000, 10, 1000);
            popMatrix();
            
            // draw mountains
            for (int i = 0; i < buildings.length; i++) {
                buildings[i].draw();
            }
            
            // draw PRM
            prm.draw();
            
            // draw blue circle for water
            goal.draw();
            
            // draw agent
            agent.draw();
            
}        
        
void drawTerrainSegment(float[][] terrainSegment, float xOffset, float zOffset, float xoffStart, float yoffStart) {
    float xoff = xoffStart;
    for (int x = 0; x < cols; x++) {
        float yoff = yoffStart;
        for (int y = 0; y < rows; y++) {
            terrainSegment[x][y] = map(noise(xoff, yoff), 0, 1, -1000, -700);
            yoff += 0.1;
        }
        xoff += 0.1;
    }

    pushMatrix();
    
    
    
    translate(width / 2 + xOffset, height / 2 + 100, zOffset);
    rotateX(PI / 2);
    background(0, 23,123);
    fill(200, 200, 200, 150);
    for (int y = 0; y < rows - 1; y++) {
        beginShape(TRIANGLE_STRIP);
        for (int x = 0; x < cols; x++) {
            vertex(x * scl - w / 2, y * scl - h / 2, terrainSegment[x][y]);
            vertex(x * scl - w / 2, (y + 1) * scl - h / 2, terrainSegment[x][y + 1]);
        }
        endShape();
        
    }

    popMatrix();
}

            
           void keyPressed() {
                if (key == ' '){
                   paused = !paused;
                }
                camera.HandleKeyPressed();
            }
                
               void keyReleased() {
                    camera.HandleKeyReleased();
                }
                    
                    
                    void updateCameraToFollowAgent(float dt) {
                         // Define the offset position of the camera relative to the agent
                          float distanceBehind = 100; // Distance behind the agent
                          float heightAbove = 50; // Height above the agent
                        
                         // Calculate the camera's desired position
                         float camX = agent.body.x - distanceBehind * agent.dir.x;
                         float camZ = agent.body.z- distanceBehind * agent.dir.y;
                         float camY = heightAbove; // Assuming the agent is on a flat plane
                        
                         // Update the camera's position smoothly
                          PVector desiredPosition = new PVector(camX, camY, camZ);
                          camera.position.lerp(desiredPosition, 0.1); // Adjust lerp factor for smoothness
                        
                         // Calculate thetabased on the agent's direction
                         camera.theta = atan2( - agent.dir.x, -agent.dir.y);
                        
                       // Set a fixed phi, or calculate based on the agent's orientation
                        // For example, looking slightly downward:
                         camera.phi = -PI /2; // Adjust as needed
                        
                         // Update the camera with the new orientation
                         
                    }
                        
                        
                        
                        boolean collision(float x, float z, float r) {
                          for (int i = 0; i < buildings.length; i++) {
                                if (buildings[i].collision(x, z, r)) {
                                    return true;
                                }
                            }
                                return false;
                            }
                                
                               boolean collides(float newX, float newZ, float newRadius, Building[] buildings) {
                                for (Building b : buildings){
                                   if (b != null) {
                                           float dx = newX - b.x;
                                           float dz = newZ - b.z;
                                           float distance = sqrt(dx * dx + dz * dz);
                                            
                                            // Use the larger size to ensureno overlap
                                            float maxBuildingSize = max(b.s,newRadius);
                                            
                                           if (distance < maxBuildingSize) {
                                               return true; // Collision detected
                                            }
                                        }
                                        }
                                           return false; // No collision
                                        }
                                            
void mousePressed() {
    camera.mousePressed(); 
}

void mouseReleased() {
    camera.mouseReleased(); 
}

void mouseDragged() {
    camera.mouseDragged(); 
}

void mouseWheel(MouseEvent event) {
    camera.mouseWheel(event);
}
